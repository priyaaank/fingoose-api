name: Test, Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: personal_finance_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install -r requirements.txt
    #     pip install pytest pytest-cov

    # - name: Run tests
    #   env:
    #     TEST_DATABASE_URL: mysql://test_user:test_password@localhost/personal_finance_test
    #   run: |
    #     pytest --cov=./ --cov-report=xml

    # - name: Upload coverage reports
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: ./coverage.xml
    #     fail_ci_if_error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/fingoose-api:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to Digital Ocean droplet
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Create network if it doesn't exist
          docker network create fingoose-network || true
          
          # Check if MySQL container exists and is running
          if ! docker ps -q -f name=mysql; then
            # Start MySQL container if it doesn't exist
            docker run -d \
              --name mysql \
              --network=fingoose-network \
              -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
              -e MYSQL_DATABASE=personal_finance \
              -e MYSQL_USER=${{ secrets.MYSQL_USER }} \
              -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              -v mysql_data:/var/lib/mysql \
              mysql:8.0
            
            # Wait for MySQL to be ready
            echo "Waiting for MySQL to be ready..."
            sleep 30
          fi
          
          # Pull latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/fingoose-api:latest
          
          # Stop existing container
          docker stop fingoose-api || true
          docker rm fingoose-api || true
          
          # Run new container
          docker run -d \
            --name fingoose-api \
            --network=fingoose-network \
            -p 5000:5000 \
            -e DATABASE_URL="mysql+pymysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@mysql:3306/personal_finance" \
            -e FLASK_ENV=production \
            ${{ secrets.DOCKER_USERNAME }}/fingoose-api:latest 